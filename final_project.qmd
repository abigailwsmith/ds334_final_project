---
title: "Final Project"
format: html
---

# Abstract/Brainstorm
*   still very much so a work in progress, more of a brainstorm than an abstract    *

I am thinking to do a project on the "Sticky Stuff" scandal in Major League Baseball in 2021. The scandal involved Major League Baseball pitchers using sticky substances on their hands, to increase spin rate adn decrease pitch speed, increasing their strike outs and making it harder for the batter to hit the ball. Ultimeatley I would like to create a shiny app to look at how the sticky stuff scandal impacted the MLB financially, this could be found by looking at attendance and tv viewership. I also think it could be interesting to see how the scandal impacted batting statistics. 

# Pitching dataset description

The initial data set that I read in is from MLB's Statcast Feature, it is accessible on the [Baseball Savant website](https://baseballsavant.mlb.com/leaderboard/custom?year=2024%2C2023%2C2022%2C2021%2C2020%2C2019%2C2018&type=pitcher&filter=&min=q&selections=pa%2Chome_run%2Ck_percent%2Cbb_percent%2Cxba%2Cxslg%2Csl_avg_speed%2Csl_avg_spin%2Cch_avg_speed%2Cch_avg_spin%2Ccu_avg_speed%2Ccu_avg_spin%2Csi_avg_speed%2Csi_avg_spin&chart=false&x=pa&y=pa&r=no&chartType=beeswarm&sort=pa&sortDir=desc). I adjusted the data frame to include pitching statistics for individual pitchers in the years 2018-2024 for the whole MLB. The below table describes each of the variables in the data set. 

| Variable | Description                                                                                                                |
|-------------------|-----------------------------------------------------|
|`last_name, first_name`    | The last and first name of the player.                                            |
|` player_id`     |   An identifying number for each player                                            |
|   `year`   |   The year for the case.                                            |
| `pa`      |Stands for players against, meaning its the number of batters that pitcher faced in the season.                                              |
|`home_run`|The number of home runs allowed by the pitcher in that season.|
|`k_percent`|The strike out percentage, the number of strike outs per batter faced by the pitcher.|
|`bb_percent`|The walk percentage, the number of walks per batter faced by the pitcher.|
|`p_hit_by_pitch`|The number of batters hit by the pitcher in that season.|
|`xba`|Opposing players' batting average against the pitcher in that season.|
|`xslg`|Opposing players' slugging average against the pitcher in that season.|
|`sl_avg_speed`|The average speed of sliders for that pitcher in that season.|
|`sl_avg_spin`|The average spin rate of sliders for that pitcher in that season.|
|`ch_avg_speed`|The average speed of changeups for that pitcher in that season.|
|`ch_avg_spin`|The average spin rate of changeups for that pitcher in that season.|
|`cu_avg_speed`|The average speed of cutters for that pitcher in that season.|
|`cu_avg_spin`|The average spin rate of cutters for that pitcher in that season.|
|`si_avg_speed`|The average speed of sinkers for that pitcher in that season.|

# Attendance datasets descriptions

Additionally, I used [basbeall-reference](https://www.baseball-reference.com/leagues/majors/2024-misc.shtml) for data on baseball attendance, in the years 2018-2024. For this data, it was all in individual data sets which I had to join together into one big one. In each dataset the variables are the same which I created a table for. 

| Variable | Description                                                                                                                |
|-------------------|-----------------------------------------------------|
|`Tm`    | The team's name.                                         |
|`Attendance`     |  Total attendance for home games that season.                                          |
|   `Attendance/G`   |  Average attendance per home game that season.                                            |
| `BatAge`      |Batter's average age in that season.                                              |
|`PAge`|Pitcher's average age in that season.|
|`BPF`|Batting park factor, a scale used to measure if a ballpark favors batters (>100) or pitchers (<100).|
|`PPF`|Pitching park factor, a scale used to measure if a ballpark favors batters (>100) or pitchers (<100).|
|`#HOF`|The number of players currently in hall of fame on that team in that season.|
|`#A-S`|The number of allstars on that team in that season.|
|`#a-tA-S`|The number of allstars on that team at any point in their career.|
|`Est. Payroll`|The estimated payroll of the team.|
|`Time`|The average game time in that season.|
|`Chall`|The average number of challenges per game in that season.|
|`Succ`|The average number of successful challenges per game in that season.|
|`Succ%`|The percentage of successful challenges per game in that season..|
|`Managers`|The name of the team's manager that season.|

# TV Viewership dataset description

As a tentative tv viewership dataset I found is this one from [kaggle](https://www.kaggle.com/datasets/mattop/world-series-baseball-television-ratings?resource=download) that covers just world series game viewership between 2022 and 2024. I am trying to find a better dataset that is general tv viewership, however it seems that most if not all avialable mlb viewership data is focused solely on the world series. However, conclusions can still be drawn from this data as the world series are the most watched games in the baseball season, and if viewership is down for those its definitely down for the entire season.

| Variable | Description                                                                                                                |
|-------------------|-----------------------------------------------------|
|`year`    | The year of the world series.                                       |
|`network`     |  The network the world series was broadcast on.                                         |
|   `average_audience`   |  The average tv audience for the whole world series                                           |
| `game_1_audience`      |The TV audience for game 1 of the world series.                                      |
| `game_2_audience`      |The TV audience for game 2 of the world series.|
| `game_3_audience`      |The TV audience for game 3 of the world series.                                      |
| `game_4_audience`      |The TV audience for game 4 of the world series.                                      |
| `game_5_audience`      |The TV audience for game 5 of the world series.                                      |
| `game_6_audience`      |The TV audience for game 6 of the world series.                                      |
| `game_7_audience`      |The TV audience for game 7 of the world series.                                      |
| `total_games_played`      |The number of games played in that world series                                     |
| `winning_team`      |The winning team of that world series.                                    |
| `losing_team`      |The losing team of that world series.                                    |
| `losing_team_wins`      |The number of wins for that losing team in that world series.      |

# Packages

```{r}
library(here)
library(readr)
library(tidyverse)
```

# Data

```{r}
# Reading in the pitching data set
pitching_df <- read_csv(here("data/pitchingstats.csv"))

# Reading in each individual attendance data set
attendance_2018 <- read_csv(here("data/2018attendance.csv"))
attendance_2019 <- read_csv(here("data/2019attendance.csv"))
attendance_2020 <- read_csv(here("data/2020attendance.csv"))
attendance_2021 <- read_csv(here("data/2021attendance.csv"))
attendance_2022 <- read_csv(here("data/2022attendance.csv"))
attendance_2023 <- read_csv(here("data/2023attendance.csv"))
attendance_2024 <- read_csv(here("data/2024attendance.csv"))

# Reading in the world series data set
worldseriesviewing <- read_csv(here("data/world-series-ratings.csv"))
```

```{r}
# Creating a year variable in each of the attendance data sets
attendance_2018$year <- 2018
attendance_2019$year <- 2019
attendance_2020$year <- 2020
attendance_2021$year <- 2021
attendance_2022$year <- 2022
attendance_2023$year <- 2023
attendance_2024$year <- 2024
```

```{r}
# Create 3 joined data sets of the attendance data sets
attendance2018_2019 <- full_join(attendance_2018, attendance_2019)
attendance2020_2021 <- full_join(attendance_2020, attendance_2021)
attendance2022_2023 <- full_join(attendance_2022, attendance_2023)

# Join those 3 data sets together into 2 datasets
attendance2018_2021 <- full_join(attendance2018_2019, attendance2020_2021)
attendance2022_2024 <- full_join(attendance2022_2023, attendance_2024)

# Join the last two big data sets in one big complete attendance data set
attendancefull <- full_join(attendance2018_2021, attendance2022_2024)
```

```{r}
# Save the attendance data set as a CSV so that I do not lose track of it
write_csv(attendancefull, "attendancefull.csv")
```

# Cleaning and tidying data

```{r}
pitching_df <- pitching_df |> rename(pitcher = `last_name, first_name`)
```

```{r}
pitch_speeds_long <- pitching_df |> pivot_longer(c("sl_avg_speed", "ch_avg_speed", "cu_avg_speed", "si_avg_speed"), names_to = "pitch_type", values_to =  "pitch_speed") |> relocate(pitch_speed, pitch_type) 

pitch_spin_long <- pitching_df |> pivot_longer(c("sl_avg_spin", "ch_avg_spin", "cu_avg_spin", "si_avg_spin"), names_to = "pitch_type", values_to =  "spin_rate") |> relocate(spin_rate, pitch_type) 
```

```{r}
# join the two new datasets
full_pitch <- bind_rows(pitch_speeds_long, pitch_spin_long)
```

# Reproducible example to try and solve the code
```{r}
example <- pitching_df |> slice(1:2) |> select(c(10:17, 1)) |> as_tibble()
example_new <- example |> pivot_longer(1:8, names_to = "temp", values_to = "speed_spin") |>
  separate(temp, into = c("type", "drop", "spin_type")) |>
  select(-drop) |>
  unite(new_val, c("type", "spin_type"))
```

```{r}
example_new |> pivot_wider(names_from = "new_val", values_from = "speed_spin")
```

```{r}
example_speeds <- example |> pivot_longer(c("sl_avg_speed", "ch_avg_speed", "cu_avg_speed", "si_avg_speed"), names_to = "pitch_type", values_to =  "pitch_speed") |> relocate(pitch_speed, pitch_type) 

example_spin <- example |> pivot_longer(c("sl_avg_spin", "ch_avg_spin", "cu_avg_spin", "si_avg_spin"), names_to = "pitch_type", values_to =  "spin_rate") |> relocate(spin_rate, pitch_type)
```

```{r}
bind_rows(example_speeds, example_spin)
```

```{r}
example_long <-example |> pivot_longer(c("sl_avg_speed", "ch_avg_speed", "cu_avg_speed", "si_avg_speed"), names_to = "speedpitch_type", values_to =  "pitch_speed") |> pivot_longer(c("sl_avg_spin", "ch_avg_spin", "cu_avg_spin", "si_avg_spin"), names_to = "spinpitch_type", values_to =  "spin_rate") |> relocate(spin_rate, pitch_speed, speedpitch_type, spinpitch_type)
```

```{r}
examples_final <- example_long |> separate(speedpitch_type, into = c("pitchtype", "speed"), sep = "_avg_") |> separate(spinpitch_type, into = c("pitch_type", "spin"), sep = "_avg_") |> select(!(c(pitchtype, speed, spin)))
```


# Apply what I solved from the example to the real dataset

```{r}
pitching_cleaner <- pitching_df |> pivot_longer(c("sl_avg_speed", "ch_avg_speed", "cu_avg_speed", "si_avg_speed"), names_to = "speedpitch_type", values_to =  "pitch_speed") |> pivot_longer(c("sl_avg_spin", "ch_avg_spin", "cu_avg_spin", "si_avg_spin"), names_to = "spinpitch_type", values_to =  "spin_rate") |>separate(speedpitch_type, into = c("pitchtype", "speed"), sep = "_avg_") |> separate(spinpitch_type, into = c("pitch_type", "spin"), sep = "_avg_") |> select(!(c(pitchtype, speed, spin))) 
```


# Cleaning up attendance and tv viewership dataframes 

I do not need all of these variables in the data frame so I am going to get rid of some of them

```{r}
attendance_smaller <- attendancefull |> select(Tm, Attendance, `Attend/G`, Time, `Est. Payroll`, year)
```

Same deal here with the tv viewership 
```{r}
tv_views_smaller <- worldseriesviewing |> select(!c(winning_team, losing_team, losing_team_wins))
```

```{r}
pitching_attendance <- left_join(pitching_cleaner, attendance_smaller)
```

```{r}
pitching_tv_attendance <- left_join(pitching_attendance, tv_views_smaller)
```

```{r}
pitching_cleaner |> group_by(year, pitch_type, pitch_speed, spin_rate) |> summarise()
```

```{r}
pitching_cleaner |> group_by(year, pitch_speed, spin_rate) |> summarise(mean_spin = mean(spin_rate), mean_speed = mean(pitch_speed))
```

# Trying to work on brainstorming static visualization for tidy app


```{r}
ggplot(data = small_clean_pitching, aes(y = spin_rate, x = pitch_speed, colour = pitch_type)) + geom_point()
```

```{r}
ggplot(data = pitching_cleaner, aes(x= year, y = spin_rate)) + geom_point()
```

The visualizations are not looking great so I need to revisit how to clean the data

```{r}
pitch_speed <- pitching_df |> pivot_longer(c("sl_avg_speed", "ch_avg_speed", "cu_avg_speed", "si_avg_speed"), names_to = "speedpitch_type", values_to =  "pitchspeed") 

pitch_spin <- pitching_df |> pivot_longer(c("sl_avg_spin", "ch_avg_spin", "cu_avg_spin", "si_avg_spin"), names_to = "spinpitch_type", values_to =  "spinrate")

binded <- bind_rows(pitch_speed, pitch_spin)


full_pitching <- binded |> separate(speedpitch_type, into = c("pitchtype", "speed"), sep = "_avg_") |> separate(spinpitch_type, into = c("pitch_type", "spin"), sep = "_avg_") |> select(!(c(pitchtype, speed, spin)))
```


```{r}
# may need to slice data since it is pretty big
small_pitching <- pitching_df |> arrange(desc(pa)) |> slice(1:200)

small_clean_pitching <- small_pitching |> pivot_longer(c("sl_avg_speed", "ch_avg_speed", "cu_avg_speed", "si_avg_speed"), names_to = "speedpitch_type", values_to =  "pitch_speed") |> pivot_longer(c("sl_avg_spin", "ch_avg_spin", "cu_avg_spin", "si_avg_spin"), names_to = "spinpitch_type", values_to =  "spin_rate") |>separate(speedpitch_type, into = c("pitchtype", "speed"), sep = "_avg_") |> separate(spinpitch_type, into = c("pitch_type", "spin"), sep = "_avg_") |> select(!(c(pitchtype, speed, spin)))
```

```{r}
pitching_cleaner |> group_by(year) |> summarise(pitch_speed_avg = mean(pitch_speed))
```


```{r}
ggplot(data = full_pitching, aes(y = spinrate, x = pitchspeed, colour = pitch_type)) + geom_point()
```


```{r}
ggplot(data = pitching_tv_attendance, aes(x = Attendance, y = spin_rate)) + geom_point()
```

```{r}
ggplot(data = pitching_df, aes(x = home_run, y = sl_avg_spin)) + geom_point()
```

```{r}
attendance_tv <- left_join(attendance_smaller, tv_views_smaller)
attendance_tv <- attendance_tv |> mutate(small_attendance = Attendance/1000, small_audience = average_audience/1000)
```

```{r}
complete <- left_join(pitching_cleaner, attendance_tv)
```

```{r}
ggplot(attendance_tv, aes(x = small_attendance, y = small_audience)) + geom_point()
```

```{r}
ggplot(data = complete, aes(y = spin_rate, x = Attendance/10000)) + geom_col()
```

#  For now I am deciding that since the main issue is the attendance dataset I am going to try and make the shiny app just for the pitching data and then go back to the attendance stuff

For now this is the static graph I will use but I will change it to something more complicated, I just want to see how this will work

```{r}
ggplot(data = pitching_cleaner, aes(x= home_run, y = spin_rate, colour = pitch_type)) + geom_point()
```

```{r}
attendance_tv_reorder <- attendance_tv |> mutate(Tm = fct_reorder(Tm, `Attend/G`))
ggplot(attendance_tv_reorder, aes(x = Tm, y = `Attend/G`)) + geom_col() + coord_flip() + theme_minimal()
```

```{r}
ggplot(attendance_tv, aes(x = year, y = `Attend/G`, colour = Tm)) + geom_line()
```

```{r}
ggplot(data = attendance_tv, aes(x = year, y = average_audience)) + geom_col()
```

```{r}
pitchspeed <- pitching_df |> pivot_longer(c("sl_avg_speed", "ch_avg_speed", "cu_avg_speed", "si_avg_speed"), names_to = "pitch_type", values_to =  "pitch_speed") |> select(!c(sl_avg_spin, ch_avg_spin, cu_avg_spin, si_avg_spin))

pitchspin <- pitching_df |> pivot_longer(c("sl_avg_spin", "ch_avg_spin", "cu_avg_spin", "si_avg_spin"), names_to = "pitch_type", values_to =  "spin_rate")|> select(!c(sl_avg_speed, ch_avg_speed, cu_avg_speed, si_avg_speed)) 
```

```{r}
library(shiny)
year_speed <- pitchspeed |> distinct(year) |> pull(year)
year_spin <- pitchspeed |> distinct(year) |> pull(year)
speed_y_var_choices <- names(pitchspeed)[c(5:10)]
spin_y_var_choices <- names(pitchspin)[c(5:10)]
speed_pitch_choice <- pitchspeed |> distinct(pitch_type) |> pull(pitch_type)
spin_pitch_choice <- pitchspin |> distinct(pitch_type) |> pull(pitch_type)
x_var <- names(attendance_tv)[c(2, 3, 8)]
year_choices_attendance <- attendance_tv|> distinct(year) |> pull(year)
ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons("speed_year_sel", label = "Choose a year for pitch speed:", choices = year_speed),
      radioButtons("spin_year_sel", label = "Choose a year for spin rate:", choices = year_spin),
      selectizeInput("speed_pitch_sel", label = "Choose pitch type:",
                     choices = pitchspeed$pitch_type, selected = "ch",
                     multiple = TRUE),
      selectizeInput("spin_pitch_sel", label = "Choose pitch type:",
                     choices = pitchspin$pitch_type, selected = "ch",
                     multiple = TRUE),
      selectInput("speed_y_var_sel", label = "Choose a y-variable for pitching speed:", choices = speed_y_var_choices),
      selectInput("spin_y_var_sel", label = "Choose a y-variable for pitching speed:", choices = spin_y_var_choices),
      radioButtons("x_sel", label = "Choose an attendance variable:", choices = y_var),
      radioButtons("year_sel_attendance", label = "Choose a year for the attendance:", choices = year_choices_pitching)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Fluid Data", plotOutput("scatterplot_speed"), plotOutput("scatterplot_spin"), plotOutput("barplot")),
        tabPanel("Static Data", plotOutput("attendance_line"), plotOutput("audience_bar"))
      )
    )
  )
  
)


server <- function(input, output, session) {
 speed_pitching_reactive <- reactive({
   speed1 <- pitchspeed |> filter(year == input$speed_year_sel) |> filter(pitch_type %in% input$speed_pitch_sel)
})
 spin_pitching_reactive <- reactive({
   spin1 <- pitchspin |> filter(year == input$spin_year_sel) |> filter(pitch_type %in% input$spin_pitch_sel)
})
 
 
output$scatterplot_speed <- renderPlot({ggplot(speed_pitching_reactive(), aes(x= pitch_speed, y = .data[[input$speed_y_var_sel]], colour = pitch_type)) + geom_point() + theme_minimal() + labs(title = glue::glue("Scatterplot of pitchspeed against ",  input$speed_y_var_sel, " in ", input$speed_year_sel))})

output$scatterplot_spin <- renderPlot({ggplot(spin_pitching_reactive(), aes(x= spin_rate, y = .data[[input$spin_y_var_sel]], colour = pitch_type)) + geom_point() + theme_minimal() + labs(title = glue::glue("Scatterplot of spin rate against ",  input$spin_y_var_sel, " in ", input$spin_year_sel))})
  attendance_reactive <- reactive({
    attendance1 <- attendance_tv|> filter(year == input$year_sel_attendance) |>  mutate(Tm = fct_reorder(Tm, .data[[input$x_sel]]))
  })
output$barplot <- renderPlot({ggplot(attendance_reactive(), aes(x = Tm, y = .data[[input$x_sel]])) + geom_col() + coord_flip() + theme_minimal() + labs(title = glue::glue("Barplot of ", input$x_sel, " in ", input$year_sel_attendance)) })

output$attendance_line <- renderPlot({ggplot(attendance_tv, aes(x = year, y = `Attend/G`, colour = Tm)) + geom_line() + theme_minimal() + labs(title = "Average Attendance per Game Over Time ") })

output$audience_bar <- renderPlot({ggplot(data = attendance_tv, aes(x = year, y = average_audience)) + geom_col() + theme_minimal() + labs(title = "Average TV Audience per World Series Game In Each Year ") })
}

shinyApp(ui, server)
```


```{r}
library(shiny)
year_choices_pitching <- pitching_cleaner |> distinct(year) |> pull(year)
x_var_choices <- names(pitching_cleaner)[c(11, 13)]
y_var_choices <- names(pitching_cleaner)[c(5:10)]
pitch_choice <- pitching_cleaner |> distinct(pitch_type) |> pull(pitch_type)
x_var <- names(attendance_tv)[c(2, 3, 8)]
year_choices_attendance <- attendance_tv|> distinct(year) |> pull(year)
ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(
      radioButtons("year_sel", label = "Choose a year for pitching:", choices = year_choices_pitching),
      selectizeInput("pitch_sel", label = "Choose pitch type:",
                     choices = pitching_cleaner$pitch_type, selected = "ch",
                     multiple = TRUE),
      radioButtons("x_var_sel", label = "Choose an x-variable for pitching:", choices = x_var_choices),
      selectInput("y_var_sel", label = "Choose a y-variable for pitching:", choices = y_var_choices),
      radioButtons("x_sel", label = "Choose an attendance variable:", choices = y_var),
      radioButtons("year_sel_attendance", label = "Choose a year for the attendance:", choices = year_choices_pitching)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Fluid Data", plotOutput("scatterplot"), plotOutput("barplot")),
        tabPanel("Static Data", plotOutput("attendance_line"), plotOutput("audience_bar"))
      )
    )
  )
  
)


server <- function(input, output, session) {
 pitching_reactive <- reactive({
   pitching1 <- pitching_cleaner |> filter(year == input$year_sel) |> filter(pitch_type %in% input$pitch_sel)
})
output$scatterplot <- renderPlot({ggplot(pitching_reactive(), aes(x= .data[[input$x_var_sel]], y = .data[[input$y_var_sel]], colour = pitch_type)) + geom_point() + theme_minimal() + labs(title = glue::glue("Scatterplot of ", input$x_var_sel, " against ",  input$y_var_sel, " in ", input$year_sel))})
  attendance_reactive <- reactive({
    attendance1 <- attendance_tv|> filter(year == input$year_sel_attendance) |>  mutate(Tm = fct_reorder(Tm, .data[[input$x_sel]]))
  })
output$barplot <- renderPlot({ggplot(attendance_reactive(), aes(x = Tm, y = .data[[input$x_sel]])) + geom_col() + coord_flip() + theme_minimal() + labs(title = glue::glue("Barplot of ", input$x_sel, " in ", input$year_sel_attendance)) })

output$attendance_line <- renderPlot({ggplot(attendance_tv, aes(x = year, y = `Attend/G`, colour = Tm)) + geom_line() + theme_minimal() + labs(title = "Average Attendance per Game Over Time ") })

output$audience_bar <- renderPlot({ggplot(data = attendance_tv, aes(x = year, y = average_audience)) + geom_col() + theme_minimal() + labs(title = "Average TV Audience per World Series Game In Each Year ") })
}

shinyApp(ui, server)
```

* maybe do a select what pitches to show 
```{r}
ggplot(pitching_cleaner, aes(x= pitch_speed, y = home_run, colour = pitch_type)) + geom_point(alpha = 0.2) + theme_minimal()
```

```{r}
pitching_top10 <- pitching_cleaner |> arrange(desc(pa)) |> slice(1:100)
ggplot(pitching_top10, aes(x = year, y = spin_rate, colour = pitcher)) + geom_line() + facet_wrap(~pitch_type)
```

```{r}
ggplot(pitching_cleaner, aes(x = spin_rate, y = pitch_speed, colour = as.factor(year))) + geom_point(alpha = 0.2) # try and see about adding a label for 2021 points
```

```{r}
ggplot(attendance_tv, aes(x = `Attend/G`/1000, y = average_audience/1000, colour = Tm)) + geom_point(alpha = 0.2) + facet_wrap(~year) # try and see about adding a label for 2021 points
```

```{r}
ggplot(pitching_cleaner, aes(x = pitch_speed)) + geom_histogram() + facet_wrap(~year)
```

```{r}
ggplot(pitching_cleaner, aes(x = spin_rate)) + geom_histogram() + facet_wrap(~year)
```


